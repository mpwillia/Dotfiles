""" Better brackets and quotes
" when typing a pair of brackets or quotes the cursor is moved inside them
inoremap () )<LEFT>(
inoremap "" "<LEFT>"
inoremap [] ]<LEFT>[
inoremap '' '<LEFT>'
inoremap <lt>> ><LEFT><

"map {} to follow one of two behaviors
"by default typing {} will type {} then move the cursor inside like other brackets and quotes
"if the first non whitespace character preceeding {} is specifically ) then
"typing {} will type {} then add two new lines between them and move the cursor inside them as;
"ex:
"void someFunction() |or| for(int i = 0; i < something; i++) |or| etc...
"{
"<-cursor
"}
inoremap {} <SPACE><ESC>:call BetterCurlyBrace()<CR>
function BetterCurlyBrace()
   
   "0 - don't open
   "1 - K&R
   "2 - Allman
   let shouldOpen = ShouldOpenCurlyBrace()
   
   if shouldOpen == 1
      "K&R
      execute "normal a\<BS>}\<LEFT>{\<CR>\<CR>\<UP> "
   elseif shouldOpen == 2
      "Allman
      execute "normal i}\<LEFT>{\<CR>\<CR>\<UP> "
   else
      "Don't open
      execute "normal i}\<LEFT>{\<RIGHT>"
   endif
   startinsert "ensure we are end in insert mode
endfunction

"Returns 1 if the braces should be opened up; 0 otherwise
function ShouldOpenCurlyBrace()
   
   "K&R check - current line
   let curLine = getline(".")
   if CheckForCloseParen(curLine) > 0
      "K&R check was successful
            return 1
   endif

   "Check if the current line is empty
   let endIdx = strlen(curLine)-1
   let idx = 0
   while idx < endIdx
      if curLine[idx] != ' '
         "if we find a non-whitespace character the line isn't empty
         return 0
      endif
      let idx += 1
   endwhile

   "Allman check - previous line
   if CheckForCloseParen(getline(line(".")-1)) > 0
      "Allman check was successful
      return 2
   endif

   "if we get here both K&R and Allman checks failed
   return 0
endfunction

"checks if the last non-whitespace character in {linestr} is a closing parenthese, ')'; returns 1 if so, 0 otherwise
function CheckForCloseParen(linestr)
   let endIdx = strlen(a:linestr)-1
   if endIdx <= 0
      return 0
   endif

   let matchIdx = strridx(a:linestr, ")")
   if matchIdx == endIdx
      "close paren is the last character in {linestr}
      return 1
   elseif matchIdx > 0
      "unsure if close paren is last non-whitespace character
      "step through the rest of {linestr} and check
      let matchIdx += 1
      while matchIdx < endIdx
         if a:linestr[matchIdx] != ' '
            "if we find a non-whitespace character return
            return 0
         endif
         let matchIdx += 1
      endwhile
      "if we get here then we didn't find any non-whitespace characters
      return 1
   endif

   "did not find a close paren
   return 0
endfunction


